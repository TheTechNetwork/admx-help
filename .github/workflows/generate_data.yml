name: Generate ADMX Data and Deploy to Pages

# This workflow can be triggered manually from the GitHub UI (workflow_dispatch)
# or on a monthly schedule (cron).
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Run once a month at 00:00 UTC on the 1st day of the month

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: write # This permission is required to push generated files back to the repo
                      # by the peaceiris/actions-gh-pages action.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # --- PowerShell Setup ---
      # Installs the latest stable PowerShell Core (pwsh) on the runner.
      - name: Install PowerShell Core
        uses: PSModule/Install-PowerShell@v1
        with:
          Version: 'latest' # Installs the latest stable PowerShell Core version

      # --- Install Evergreen PowerShell Module ---
      # Installs the Evergreen module and captures its exact installation path.
      - name: Install Evergreen PowerShell Module
        id: install_evergreen # Assign an ID to this step to reference its outputs
        shell: pwsh # Ensures this step runs directly in PowerShell Core
        run: |
          Write-Host "Installing Evergreen PowerShell Module..."
          # Install the Evergreen module for the current user.
          # -ErrorAction Stop will cause the workflow to fail immediately if installation encounters an issue.
          Install-Module -Name Evergreen -Force -Scope CurrentUser -Repository PSGallery -AllowClobber -ErrorAction Stop
          
          # Find the actual base directory where Evergreen was installed.
          # Get-Module returns a PSModuleInfo object; its ModuleBase property contains the path.
          $EvergreenModulePath = (Get-Module -ListAvailable -Name Evergreen).ModuleBase
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module was installed but its path could not be determined. Aborting."
              exit 1
          }
          
          Write-Host "Evergreen Module Base Path: $EvergreenModulePath"
          
          # Set the found path as a step output. This output can be referenced by subsequent steps.
          # This is the standard way to pass information between steps in GitHub Actions.
          echo "evergreen_path=$EvergreenModulePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # --- Directory Preparation ---
      # Creates the directory where Evergreen will download the ADMX/ADML files.
      - name: Create ADMX download directory
        run: mkdir -p admx_download_stg

      # --- Download ADMX using Evergreen ---
      # This step imports the Evergreen module using its exact path and then runs Get-EvergreenAdmx.
      - name: Download ADMX using Evergreen
        shell: pwsh # Ensures this step runs directly in PowerShell Core
        run: |
          # Retrieve the Evergreen module path from the output of the previous step.
          # This path is the module's 'ModuleBase' (e.g., /home/runner/.local/share/powershell/Modules/Evergreen/2505.2104).
          $EvergreenModulePath = "${{ steps.install_evergreen.outputs.evergreen_path }}"
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module path was not found from previous step's output. Aborting."
              exit 1
          }

          Write-Host "Attempting to import Evergreen from: $EvergreenModulePath"
          
          # Add the module's *exact base directory* to the current session's PSModulePath.
          # This makes the 'Evergreen' module discoverable by its name for Import-Module.
          # It's crucial this modification happens in the *same run block* as Import-Module.
          $env:PSModulePath = "$EvergreenModulePath;$env:PSModulePath"
          Write-Host "Updated PSModulePath for this session: $env:PSModulePath"

          # Explicitly import the Evergreen module by name.
          # It should now be found because its path is correctly added to PSModulePath.
          # -ErrorAction Stop ensures the workflow fails if the import itself has issues.
          Import-Module -Name Evergreen -ErrorAction Stop

          Write-Host "Evergreen module imported. Starting ADMX download..."
          # Now, run the Get-EvergreenAdmx cmdlets to download the ADMX files.
          # -Destination specifies the folder created earlier for downloaded ADMX.
          Get-EvergreenAdmx -Product Windows -OSVersions 'Windows10AndLater' -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product MSEdge -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product Office -Destination admx_download_stg -Force
          # Add or remove products here based on which ADMX files you want to include.
          # Example: Get-EvergreenAdmx -Product OneDrive -Destination admx_download_stg -Force
          # Example: Get-EvergreenAdmx -Product FSLogix -Destination admx_download_stg -Force
          Write-Host "ADMX download complete."

      # --- Python Setup & Parsing ---
      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python
        with:
          python-version: '3.x' # Use the latest Python 3 version

      - name: Install Python dependencies
        run: pip install lxml # Installs the lxml library for robust XML parsing

      # Creates the necessary output directories for your frontend and generated data.
      - name: Create output directory for frontend and data
        run: |
          mkdir -p src/frontend/data # Directory for your JSON data files
          mkdir -p _site              # Root directory for GitHub Pages content

      # Runs your Python script to parse the downloaded ADMX/ADML files
      # and generate the JSON data consumed by your frontend.
      - name: Run ADMX Parsing Script
        # Your Python script expects the path to the PolicyDefinitions folder.
        # Evergreen places ADMX/ADML files in 'PolicyDefinitions' inside the specified destination.
        run: python src/python/parse_admx.py admx_download_stg/PolicyDefinitions

      # --- Frontend Deployment ---
      # Copies your frontend assets (HTML, CSS, JS) and the generated JSON data
      # into the _site directory, which will be published.
      - name: Copy Frontend Assets to _site
        run: cp -r src/frontend/* _site/

      # Deploys the content of the _site directory to your GitHub Pages branch.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4 # Robust action for GitHub Pages deployment
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GitHub token
          publish_dir: ./_site                      # Directory to publish
          publish_branch: gh-pages                      # The branch GitHub Pages will serve from (can be 'gh-pages' too)
          force_orphan: true                        # Overwrites existing content on the publish branch (good for static sites)
