name: Generate ADMX Data and Deploy to Pages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build-and-deploy:
    runs-on: windows-latest # Using Windows runner for better PowerShell compatibility
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Evergreen PowerShell Module
        id: install_evergreen
        shell: pwsh
        run: |
          Write-Host "Installing Evergreen PowerShell Module..."
          Install-Module -Name Evergreen -Force -Scope CurrentUser -Repository PSGallery -AllowClobber -ErrorAction Stop
          
          $EvergreenModulePath = (Get-Module -ListAvailable -Name Evergreen).ModuleBase
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module was installed but its path could not be determined. Aborting."
              exit 1
          }
          
          Write-Host "Evergreen Module Base Path found by Get-Module: ${EvergreenModulePath}"
          
          if (Test-Path "${EvergreenModulePath}\Evergreen.psd1") {
              Write-Host "SUCCESS: Evergreen.psd1 manifest file found at expected location!"
          } else {
              Write-Error "ERROR: Evergreen.psd1 manifest file NOT found at expected location: ${EvergreenModulePath}\Evergreen.psd1"
              Write-Host "Listing contents of ${EvergreenModulePath}:"
              Get-ChildItem -Path "${EvergreenModulePath}"
              exit 1
          }

          echo "evergreen_path=${EvergreenModulePath}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create ADMX download directory
        shell: pwsh
        run: mkdir -Force admx_download_stg

      # --- Download ADMX using Evergreen (with detailed diagnostics) ---
      - name: Download ADMX using Evergreen
        shell: pwsh
        run: |
          $EvergreenModulePath = "${{ steps.install_evergreen.outputs.evergreen_path }}"
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module path was not found from previous step's output. Aborting."
              exit 1
          }

          Write-Host "Starting Evergreen download attempts..."
          Write-Host "Evergreen Module Base Path from previous step output: ${EvergreenModulePath}"
          
          # --- DIAGNOSTICS: File System Check ---
          Write-Host "--- Diagnostics: File System Check ---"
          Write-Host "Checking if Evergreen ModuleBase directory exists: ${EvergreenModulePath}"
          if (Test-Path "${EvergreenModulePath}") {
              Write-Host "Directory exists. Listing contents recursively:"
              Get-ChildItem -Recurse -Path "${EvergreenModulePath}"
              if (Test-Path "${EvergreenModulePath}\Evergreen.psd1") {
                  Write-Host "SUCCESS: Evergreen.psd1 manifest file found at ${EvergreenModulePath}\Evergreen.psd1"
                  Write-Host "Permissions for Evergreen.psd1:"
                  (Get-Item "${EvergreenModulePath}\Evergreen.psd1").Permissions
              } else {
                  Write-Error "ERROR: Evergreen.psd1 manifest NOT found directly inside ${EvergreenModulePath}"
              }
          } else {
              Write-Error "ERROR: Evergreen ModuleBase directory DOES NOT EXIST: ${EvergreenModulePath}"
              exit 1
          }
          Write-Host "--- End Diagnostics ---"

          # --- PSModulePath Management ---
          Write-Host "Current PSModulePath (BEFORE modification): ${env:PSModulePath}"
          $env:PSModulePath = "${EvergreenModulePath};${env:PSModulePath}"
          Write-Host "Updated PSModulePath for this session: ${env:PSModulePath}"
          
          # --- Module Import Attempt ---
          Write-Host "Attempting to import module by name: Evergreen"
          Import-Module -Name Evergreen -ErrorAction Stop

          Write-Host "Evergreen module imported successfully. Proceeding with ADMX download..."

          # --- NEW DIAGNOSTIC: List Exported Commands ---
          Write-Host "--- Diagnostics: Listing Exported Commands from Evergreen Module ---"
          # This command will show what cmdlets/functions the Evergreen module is actually making available.
          Get-Command -Module Evergreen | Out-Host
          Write-Host "--- End Exported Commands Diagnostics ---"
          # --- END NEW DIAGNOSTIC ---

          # Now, run the Get-EvergreenAdmx cmdlets
          Get-EvergreenAdmx -Product Windows -OSVersions 'Windows10AndLater' -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product MSEdge -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product Office -Destination admx_download_stg -Force
          Write-Host "ADMX download complete."

      # --- Python Setup & Parsing ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install lxml

      - name: Create output directory for frontend and data
        run: |
          mkdir -p src/frontend/data
          mkdir -p _site

      - name: Run ADMX Parsing Script
        run: python src/python/parse_admx.py admx_download_stg/PolicyDefinitions

      - name: Copy Frontend Assets to _site
        run: cp -r src/frontend/* _site/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          publish_branch: gh-pages
          force_orphan: true
