name: Generate ADMX Data and Deploy to Pages

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI
  schedule:
    - cron: '0 0 1 * *' # Run once a month at 00:00 UTC on the 1st day of the month

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push generated files back to the repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Install PowerShell Core ---
      - name: Install PowerShell Core
        uses: PSModule/Install-PowerShell@v1
        with:
          Version: 'latest' # Installs the latest stable PowerShell Core

      # --- Install Evergreen PowerShell Module ---
      # This step installs Evergreen and then determines its exact installation path,
      # saving it as a step output for subsequent steps.
      - name: Install Evergreen PowerShell Module
        id: install_evergreen # Give this step an ID to reference its outputs
        shell: pwsh # Ensure this step runs directly in PowerShell
        run: |
          # Install the module for the current user.
          Install-Module -Name Evergreen -Force -Scope CurrentUser -Repository PSGallery -AllowClobber -ErrorAction Stop
          
          # Find the actual path where Evergreen was installed.
          # Get-Module will return the path where the module's .psd1 (or equivalent) file is located.
          $EvergreenModulePath = (Get-Module -ListAvailable -Name Evergreen).ModuleBase
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module was installed but its path could not be determined. Aborting."
              exit 1
          }
          
          Write-Host "Evergreen Module Base Path: $EvergreenModulePath"
          
          # Set the path as a step output. This output can be referenced by other steps.
          echo "evergreen_path=$EvergreenModulePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create ADMX download directory
        run: mkdir -p admx_download_stg

      # --- Download ADMX using Evergreen ---
      # This step uses the path from the previous step's output to explicitly import the module.
      - name: Download ADMX using Evergreen
        shell: pwsh # Ensure this step runs directly in PowerShell
        run: |
          # Retrieve the Evergreen module path from the output of the previous step.
          $EvergreenModulePath = "${{ steps.install_evergreen.outputs.evergreen_path }}"
          
          if (-not $EvergreenModulePath) {
              Write-Error "Evergreen module path was not found from previous step's output. Aborting."
              exit 1
          }

          Write-Host "Attempting to import Evergreen from: $EvergreenModulePath"
          
          # Explicitly import the Evergreen module using its full path.
          Import-Module -Name Evergreen -FullyQualifiedPath "$EvergreenModulePath/Evergreen.psd1" -ErrorAction Stop
          # Using -FullyQualifiedPath and pointing to the .psd1 (module manifest) is the most reliable way.

          # Now, run the Get-EvergreenAdmx cmdlets to download the ADMX files.
          Get-EvergreenAdmx -Product Windows -OSVersions 'Windows10AndLater' -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product MSEdge -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product Office -Destination admx_download_stg -Force
          # You can add more products supported by Evergreen here (e.g., OneDrive, FSLogix, etc.).

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install lxml

      - name: Create output directory for frontend and data
        run: |
          mkdir -p src/frontend/data
          mkdir -p _site

      - name: Run ADMX Parsing Script
        # Your Python script will parse the ADMX files downloaded by Evergreen.
        # Evergreen places them in a 'PolicyDefinitions' subfolder within the destination.
        run: python src/python/parse_admx.py admx_download_stg/PolicyDefinitions

      - name: Copy Frontend Assets to _site
        # Move your HTML, CSS, JS, and the generated JSON data to the _site directory for GitHub Pages.
        run: cp -r src/frontend/* _site/

      - name: Deploy to GitHub Pages
        # This action handles the deployment of the _site directory to GitHub Pages.
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          publish_branch: gh-pages # Or 'gh-pages' if you prefer a separate branch for published content
          force_orphan: true # Cleans up old content on the publish_branch
