name: Generate ADMX Data and Deploy to Pages

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI
  schedule:
    - cron: '0 0 1 * *' # Run once a month at 00:00 UTC on the 1st day of the month

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push generated files back to the repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Install PowerShell ---
      - name: Install PowerShell Core
        uses: PSModule/Install-PowerShell@v1
        with:
          Version: 'latest' # Use 'latest' for the newest stable PowerShell Core

      # --- Install Evergreen PowerShell Module ---
      # This step will install Evergreen to a specific, well-known path within the runner's home directory.
      - name: Install Evergreen PowerShell Module
        shell: pwsh # Ensure this step runs directly in PowerShell
        run: |
          # Define a common module path in the runner's home directory for CurrentUser scope
          # This ensures it's always in a predictable location for the current user.
          $ModulePath = "$($env:HOME)/.local/share/PowerShell/Modules"
          
          # Ensure this path exists
          mkdir -p $ModulePath
          
          # Install the module to this specific path
          # Use -ErrorAction Stop to fail fast if installation has issues
          Install-Module -Name Evergreen -Force -Scope CurrentUser -Repository PSGallery -AllowClobber -Destination "$ModulePath" -ErrorAction Stop
          
          # Verify the module is now available by listing it
          Get-Module -ListAvailable -Name Evergreen | Out-Host
          if (-not (Get-Module -ListAvailable -Name Evergreen)) {
              Write-Error 'Evergreen module was installed but is not found. Check PSModulePath.'
              exit 1
          }

      # --- Prepare directories for downloaded ADMX ---
      - name: Create ADMX download directory
        run: mkdir -p admx_download_stg

      # --- Download ADMX using Evergreen ---
      # This step explicitly imports the module before using its cmdlets.
      - name: Download ADMX using Evergreen
        shell: pwsh # Ensure this step runs directly in PowerShell
        run: |
          # Explicitly import the module in this session.
          # It should now be discoverable because it was installed to a standard CurrentUser path
          # and the PSModulePath should automatically include that location.
          Import-Module Evergreen -ErrorAction Stop

          # Now run the Get-EvergreenAdmx cmdlets
          Get-EvergreenAdmx -Product Windows -OSVersions 'Windows10AndLater' -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product MSEdge -Destination admx_download_stg -Force
          Get-EvergreenAdmx -Product Office -Destination admx_download_stg -Force
          # Add more products supported by Evergreen as needed (e.g., OneDrive, FSLogix, etc.)
        # Note: Evergreen downloads ADMX/ADML into a 'PolicyDefinitions' subfolder within the destination.

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install lxml

      - name: Create output directory for frontend and data
        run: |
          mkdir -p src/frontend/data
          mkdir -p _site

      - name: Run ADMX Parsing Script
        # Point your parser to the location where Evergreen saved the ADMX files
        # The PolicyDefinitions folder is inside admx_download_stg
        run: python src/python/parse_admx.py admx_download_stg/PolicyDefinitions

      - name: Copy Frontend Assets to _site
        run: cp -r src/frontend/* _site/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          publish_branch: main # Or gh-pages if you prefer a separate branch for published content
          force_orphan: true # Cleans up old content on the publish_branch
